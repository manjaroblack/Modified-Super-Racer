######################################################################################################################################################
###                                       Start / end overrides                                                                                    ###
######################################################################################################################################################
[gcode_macro _PRUSA_START_SR]
gcode:
  G28 ;Home
  StealthChop ;spreadcycle
  G90
  M107 ;start with the fan off
  M104 S0 ; Stops PS/SS from sending temp waits separately
  M140 S0
  # Parameters
  {% set bedtemp = params.BED|int %}
  {% set hotendtemp = params.HOTEND|int %}
   M190 S{bedtemp}   
   M109 S{hotendtemp}  
    G1 Z15.0 F9000 ;move the platform down 15mm
    G92 E0 ;zero the extruded length
    PRIME_SR
    G92 E-0.7
    G92 E0


############################################################################################################################################################
###                FIRMWARE SELECTION / EMULATOR FOR PROFILES. LIVE CHANGES / DIFFERENT EFFECTORS. E.G DD IS SIMILAR TO "VORON"                          ###
############################################################################################################################################################
[gcode_macro Firmware_Select]
gcode:
    {% if 'CARTESIAN_FILAMENT' in params and params.CARTESIAN_FILAMENT == "active" %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=8.0
        SET_VELOCITY_LIMIT ACCEL=1200
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL=650
        SET_VELOCITY_LIMIT VELOCITY=150
       { action_respond_info(" CARTESIAN_FILAMENT active ") }
    {% elif 'SUPER_RACER' in params and params.SUPER_RACER == "active" %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=30
        SET_VELOCITY_LIMIT ACCEL=2200
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL=999999
        SET_VELOCITY_LIMIT VELOCITY=200
       { action_respond_info(" SUPER_RACER active ") }
    {% elif 'V4' in params and params.V4 == "active" %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5.0
        SET_VELOCITY_LIMIT ACCEL=8000
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL=5000
        SET_VELOCITY_LIMIT VELOCITY=400
       { action_respond_info(" V400 STOCK PAD VALUES active ") }
    {% elif 'DEFAULT' in params and params.DEFAULT == "active" %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.config.printer.square_corner_velocity}
        SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.config.printer.max_velocity}
       { action_respond_info(" DEFAULT active printer.cfg values ") }
    {% elif 'VORON_2' in params and params.VORON_2 == "active" %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5
        SET_VELOCITY_LIMIT ACCEL=3000
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL=1500
        SET_VELOCITY_LIMIT VELOCITY=300
       { action_respond_info(" VORON_2 active ") }
    {% elif 'VORON_2_CURA' in params and params.VORON_2_CURA == "active" %}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=30
        SET_VELOCITY_LIMIT ACCEL=2200
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL=99999
        SET_VELOCITY_LIMIT VELOCITY=400
       { action_respond_info(" VORON_2_CURA active ") }
    {% else %}
        M117 Must select a value using "active" in the dialog box
       { action_respond_info("Must select a value using  active  in the dialog box Note: values can be called in start or perfilament gcode depending on slicer  ") }
       { action_respond_info("Must select a value using  active Expected usage: to be used to either set values live print or, be used to emulate X printer in order to use default profiles    ") }
    {% endif %}

############################################################################################################################################################
###                FIRMWARE SELECTION / EMULATOR FOR PROFILES. LIVE CHANGES / DIFFERENT EFFECTORS. E.G DD IS SIMILAR TO "VORON"                          ###
############################################################################################################################################################
[gcode_macro PRINTER_CFG]
gcode:
   {% set ACTIVE = params.ACTIVE|default(0) %} 
   {% if 'ACTIVE' in params and params.ACTIVE == "1" %}
   {% set svv = printer.save_variables.variables %}
   {% set ROTATION_DISTANCE = printer.configfile.config.extruder.rotation_distance %} 
   {% set initial_load_amt = (80) %}
   {% set initial_unload_amt = (-80) %}
   {% set slight_purge_amt = (2) %}  
   {% set slight_purge_speed = (5 *60) %} 
   {% set filament_load_speed = (13 *60) %} 
   {% set filament_unload_speed = (13 *60) %} 
   {% set extruder_current = printer.configfile.settings['tmc2209 extruder'].run_current %} 
    M117 config value {rotatation_distance_config} active value {svv.exturder_rotation_distance}
    SAVE_VARIABLE VARIABLE=custom VALUE=0
    SAVE_VARIABLE VARIABLE=default_config VALUE=1
   # SET_TMC_CURRENT STEPPER=extruder CURRENT={extruder_current}
    SAVE_VARIABLE VARIABLE=extruder_load VALUE={initial_load_amt}
    SAVE_VARIABLE VARIABLE=extruder_unload VALUE={initial_unload_amt}
    SAVE_VARIABLE VARIABLE=slight_purge_amount VALUE={slight_purge_amt}
    SAVE_VARIABLE VARIABLE=slight_purge_speed VALUE={slight_purge_speed}
    SAVE_VARIABLE VARIABLE=filament_load_speed VALUE={filament_load_speed}
    SAVE_VARIABLE VARIABLE=filament_load_speed VALUE={filament_unload_speed}
    SAVE_VARIABLE VARIABLE=extruder_rotation_distance VALUE={ROTATION_DISTANCE}
    Extrude_140 SAVE_ROTATION_DISTANCE={ROTATION_DISTANCE}
    UPDATE_DELAYED_GCODE ID=Back_End DURATION=1
   {% endif %}

[gcode_macro  Extrude_140]
gcode:
 {% if 'Rotation_distance_check' in params %}
  {% set Rotation_distance_check = params.Rotation_distance_check|default(140) %}
  M117 Extruding 140mm of filament
  M83
  G1 E{Rotation_distance_check} F60
  { action_respond_info ("Extruding 140mm of filament") }
  {% elif 'SAVE_ROTATION_DISTANCE' in params %}
  SAVE_VARIABLE VARIABLE=extruder_rotation_distance VALUE={params.SAVE_ROTATION_DISTANCE|default(25)}
  SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder DISTANCE={params.SAVE_ROTATION_DISTANCE}
  UPDATE_DELAYED_GCODE ID=Back_End DURATION=1
 {% else %}
  M83
  G1 E140 F60
  { action_respond_info ("Extruding 140mm of filament") }
 {% endif %}
###########################################################################################################################################################################################################################

[delayed_gcode SELECT_EXTRUDER_RETRACT_FLOW]
initial_duration: 10
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if svv.custom == 1 and svv.default_config == 1 %}
    SAVE_VARIABLE VARIABLE=custom VALUE=0
    SAVE_VARIABLE VARIABLE=default_config VALUE=1
    SET_TMC_CURRENT STEPPER=extruder CURRENT={printer.configfile.settings['tmc2209 extruder'].run_current } #### Assumes stock flsun extruder motor 
  {% elif svv.default_config == 1 %}
    SET_RETRACTION RETRACT_LENGTH={printer.configfile.settings.firmware_retraction.retract_length}
    SET_RETRACTION RETRACT_SPEED={printer.configfile.settings.firmware_retraction.retract_speed}
    SET_RETRACTION UNRETRACT_SPEED={printer.configfile.settings.firmware_retraction.unretract_speed}
    SET_TMC_CURRENT STEPPER=extruder CURRENT={printer.configfile.settings['tmc2209 extruder'].run_current }
  {% else %}
    SAVE_VARIABLE VARIABLE=custom VALUE=0
    SAVE_VARIABLE VARIABLE=default_config VALUE=1
    SET_RETRACTION RETRACT_LENGTH={printer.configfile.settings.firmware_retraction.retract_length}
    SET_RETRACTION RETRACT_SPEED={printer.configfile.settings.firmware_retraction.retract_speed}
    SET_RETRACTION UNRETRACT_SPEED={printer.configfile.settings.firmware_retraction.unretract_speed}
    SET_TMC_CURRENT STEPPER=extruder CURRENT={printer.configfile.settings['tmc2209 extruder'].run_current }
  {% endif %}
  {% set svv = printer.save_variables.variables %}
  {% if svv.flow_pla_active == 1 %}
    SET_RETRACTION RETRACT_LENGTH={svv.pla_retract_length}
    SET_RETRACTION RETRACT_SPEED={svv.pla_retract_speed}
    SET_RETRACTION UNRETRACT_SPEED={svv.pla_unretract_speed}
    M221 S{svv.flow_pla}
    M117 Set PLA flow. Current rotation distance={svv.extruder_rotation_distance}
  {% elif svv.flow_petg_active == 1 %}
    SET_RETRACTION RETRACT_LENGTH={svv.petg_retract_length}
    SET_RETRACTION RETRACT_SPEED={svv.petg_retract_speed}
    SET_RETRACTION UNRETRACT_SPEED={svv.petg_unretract_speed}
    M221 S{svv.flow_petg}
    M117 Set PETG flow. Current rotation distance={svv.extruder_rotation_distance}
  {% elif svv.flow_abs_active == 1 %}
    SET_RETRACTION RETRACT_LENGTH={svv.abs_retract_length}
    SET_RETRACTION RETRACT_SPEED={svv.abs_retract_speed}
    SET_RETRACTION UNRETRACT_SPEED={svv.abs_unretract_speed}
    M221 S{svv.flow_abs}
    M117 Set ABS flow. Current rotation distance={svv.extruder_rotation_distance}
  {% elif svv.flow_nylon_active == 1 %}
    SET_RETRACTION RETRACT_LENGTH={svv.nylon_retract_length}
    SET_RETRACTION RETRACT_SPEED={svv.nylon_retract_speed}
    SET_RETRACTION UNRETRACT_SPEED={svv.nylon_unretract_speed}
    M221 S{svv.flow_nylon}
    M117 Set NYLON flow. Current rotation distance={svv.extruder_rotation_distance}
  {% elif svv.flow_carbon_active == 1 %}
    SET_RETRACTION RETRACT_LENGTH={svv.carbon_retract_length}
    SET_RETRACTION RETRACT_SPEED={svv.carbon_retract_speed}
    SET_RETRACTION UNRETRACT_SPEED={svv.carbon_unretract_speed}
    M221 S{svv.flow_carbon}
    M117 Set CARBON flow. Current rotation distance={svv.extruder_rotation_distance}
  {% elif svv.flow_pla_active == 1 and svv.flow_petg_active == 1 and svv.flow_abs_active == 1 and svv.flow_nylon_active == 1 %}
    SAVE_VARIABLE VARIABLE=flow_pla_active VALUE=0
    SAVE_VARIABLE VARIABLE=flow_petg_active VALUE=0
    SAVE_VARIABLE VARIABLE=flow_abs_active VALUE=0
    SAVE_VARIABLE VARIABLE=flow_nylon_active VALUE=0
    M221 S100
  {% endif %}

[gcode_macro select_profile]
gcode:
 {% set svv = printer.save_variables.variables %}
 {% set P = params.PLA|default(100) %}      
 {% set PET= params.PETG|default(94)|float %} 
 {% set AB = params.ABS|default(90) %}       
 {% set NY = params.NYLON|default(87) %}       
 {% set CF = params.CARBON|default(86) %}      
 {% set OFF = params.PROFILES_OFF %}        
 {%- if 'PLA' in params %}
    {%- set flow_pla = printer.save_variables.variables['flow_pla'] %}
    {%- set message = "current pla flow: " ~ flow_pla %}
    { action_respond_info("current pla flow: " ~ flow_pla) }
   SAVE_VARIABLE VARIABLE=flow_pla_active VALUE=1
   UPDATE_DELAYED_GCODE ID=SELECT_EXTRUDER_RETRACT_FLOW DURATION=1
   SAVE_VARIABLE VARIABLE=flow_petg_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_abs_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_nylon_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_carbon_active VALUE=0
   SET_RETRACTION RETRACT_LENGTH={svv.pla_retract_length}
   SET_RETRACTION RETRACT_SPEED={svv.pla_retract_speed}
   SET_RETRACTION UNRETRACT_SPEED={svv.pla_unretract_speed}
   {% if svv.p_a_pla or svv.p_a_pla == 0 %}
   SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={svv.p_a_pla}
   {% else %}
   {% endif %}   
   {% if svv.speed_pla %}
   M220 S{svv.speed_pla}
   {% else %}
   {% endif %}
   UPDATE_DELAYED_GCODE ID=SELECT_EXTRUDER_RETRACT_FLOW DURATION=1
 {% elif 'PETG' in params %}
 {%- set flow_petg = printer.save_variables.variables['flow_petg'] %}
    {%- set message = "current petg flow: " ~ flow_pla %}
    { action_respond_info("current petg flow: " ~ flow_petg) }
   SAVE_VARIABLE VARIABLE=flow_petg_active VALUE=1
   SAVE_VARIABLE VARIABLE=flow_abs_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_nylon_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_pla_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_carbon_active VALUE=0
   SET_RETRACTION RETRACT_LENGTH={svv.petg_retract_length}
   SET_RETRACTION RETRACT_SPEED={svv.petg_retract_speed}
   SET_RETRACTION UNRETRACT_SPEED={svv.petg_unretract_speed}
   {% if svv.p_a_petg or svv.p_a_petg == 0 %}
   SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={svv.p_a_petg}
   {% else %}
   {% endif %}   
   {% if svv.speed_petg %}
   M220 S{svv.speed_petg}
   {% else %}
   {% endif %}
  UPDATE_DELAYED_GCODE ID=SELECT_EXTRUDER_RETRACT_FLOW DURATION=1
 {% elif 'ABS' in params %}
 {%- set flow_abs = printer.save_variables.variables['flow_abs'] %}
    {%- set message = "current abs flow: " ~ flow_abs %}
    { action_respond_info("current abs flow: " ~ flow_abs) }
   SAVE_VARIABLE VARIABLE=flow_abs_active VALUE=1
   SAVE_VARIABLE VARIABLE=flow_pla_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_petg_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_nylon_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_carbon_active VALUE=0
   SET_RETRACTION RETRACT_LENGTH={svv.abs_retract_length}
   SET_RETRACTION RETRACT_SPEED={svv.abs_retract_speed}
   SET_RETRACTION UNRETRACT_SPEED={svv.abs_unretract_speed}
   {% if svv.p_a_abs or svv.p_a_abs == 0 %}
   SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={svv.p_a_abs}
   {% else %}
   {% endif %}    
   {% if svv.speed_abs %}
   M220 S{svv.speed_abs}
   {% else %}
   {% endif %}
  UPDATE_DELAYED_GCODE ID=SELECT_EXTRUDER_RETRACT_FLOW DURATION=1
 {% elif 'NYLON' in params %}
 {%- set flow_nylon = printer.save_variables.variables['flow_nylon'] %}
    {%- set message = "current nylon flow: " ~ flow_nylon %}
    { action_respond_info("current nylon flow: " ~ flow_nylon) }
   SAVE_VARIABLE VARIABLE=flow_nylon_active VALUE=1
   SAVE_VARIABLE VARIABLE=flow_pla_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_petg_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_abs_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_carbon_active VALUE=0
   SET_RETRACTION RETRACT_LENGTH={svv.nylon_retract_length}
   SET_RETRACTION RETRACT_SPEED={svv.nylon_retract_speed}
   SET_RETRACTION UNRETRACT_SPEED={svv.nylon_unretract_speed}
   {% if svv.p_a_nylon or svv.p_a_nylon == 0 %}
   SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={svv.p_a_nylon}
   {% else %}
   {% endif %}   
   {% if svv.speed_nylon %}
   M220 S{svv.speed_nylon}
   {% else %}
   {% endif %}
  UPDATE_DELAYED_GCODE ID=SELECT_EXTRUDER_RETRACT_FLOW DURATION=1
 {% elif 'CARBON' in params %}
 {%- set flow_carbon = printer.save_variables.variables['flow_carbon'] %}
    {%- set message = "current carbon flow: " ~ flow_carbon %}
    { action_respond_info("current carbon flow: " ~ flow_carbon) }
   SAVE_VARIABLE VARIABLE=flow_carbon_active VALUE=1
   SAVE_VARIABLE VARIABLE=flow_nylon_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_pla_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_petg_active VALUE=0
   SAVE_VARIABLE VARIABLE=flow_abs_active VALUE=0
   SET_RETRACTION RETRACT_LENGTH={svv.carbon_retract_length}
   SET_RETRACTION RETRACT_SPEED={svv.carbon_retract_speed}
   SET_RETRACTION UNRETRACT_SPEED={svv.carbon_unretract_speed}
   {% if svv.p_a_carbon or svv.p_a_carbon == 0 %}
   SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={svv.p_a_carbon}
   {% else %}
   {% endif %}      
   {% if svv.speed_carbon %}
   M220 S{svv.speed_carbon}
   {% else %}
   {% endif %}
  UPDATE_DELAYED_GCODE ID=SELECT_EXTRUDER_RETRACT_FLOW DURATION=1
 {% elif 'PROFILES_OFF' in params  %}
    SAVE_VARIABLE VARIABLE=flow_carbon_active VALUE=0
    SAVE_VARIABLE VARIABLE=flow_nylon_active VALUE=0
    SAVE_VARIABLE VARIABLE=flow_pla_active VALUE=0
    SAVE_VARIABLE VARIABLE=flow_petg_active VALUE=0
    SAVE_VARIABLE VARIABLE=flow_abs_active VALUE=0
    { action_respond_info("All profiles turned off") }
 {% else %}
    {%- set flow_nylon = printer.save_variables.variables['flow_nylon'] %}
    {%- set message = "current nylon flow: " ~ flow_nylon %}
    { action_respond_info("current nylon flow: " ~ flow_nylon) }
    {%- set flow_abs = printer.save_variables.variables['flow_abs'] %}
    {%- set message2 = "current abs flow: " ~ flow_abs %}
    { action_respond_info("current abs flow: " ~ flow_abs) }
    {%- set flow_petg = printer.save_variables.variables['flow_petg'] %}
        {%- set message3 = "current petg flow: " ~ flow_pla %}
        { action_respond_info("current petg flow: " ~ flow_petg) }
    {%- set flow_pla = printer.save_variables.variables['flow_pla'] %}
        {%- set message4 = "current pla flow: " ~ flow_pla %}
        { action_respond_info("current pla flow: " ~ flow_pla) }
    {%- set flow_carbon = printer.save_variables.variables['flow_carbon'] %}
    {%- set message = "current carbon flow: " ~ flow_carbon %}
    { action_respond_info("current carbon flow: " ~ flow_carbon) }
    { action_respond_info("1=off select any profile to re-enable") }
 {% endif %}

[gcode_macro save_profile]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set PLA = params.PLA|default(100) %}     
  {% set PETG = params.PETG|default(94) %} 
  {% set ABS = params.ABS|default(90) %}      
  {% set NYLON = params.NYLON|default(87) %}   
  {% set CARBON = params.CARBON|default(87) %}
  {% set SPEED = params.SPEED|default(100) %}
  {% set P_A = params.P_A|default(0.02)|float %} 
  {% set PLA_P_A = params.P_A%}
  {% set PETG_P_A = params.P_A %} 
  {% set ABS_P_A = params.P_A %} 
  {% set NYLON_P_A = params.P_A %} 
  {% set CARBON_P_A = params.P_A %}
  {% if 'PLA' in params %}
   {% if 'RETRACT_LENGTH' in params and 'RETRACT_SPEED' in params and 'UNRETRACT_SPEED' in params %}
      SAVE_VARIABLE VARIABLE=pla_retract_length VALUE={params.RETRACT_LENGTH}
      SAVE_VARIABLE VARIABLE=pla_retract_speed VALUE={params.RETRACT_SPEED}
      SAVE_VARIABLE VARIABLE=pla_unretract_speed VALUE={params.UNRETRACT_SPEED}
      SET_RETRACTION RETRACT_LENGTH={params.RETRACT_LENGTH|default(0.45)}
      SET_RETRACTION RETRACT_SPEED={params.RETRACT_SPEED|default(30)}
      SET_RETRACTION UNRETRACT_SPEED={params.UNRETRACT_SPEED|default(30)}
      SAVE_VARIABLE VARIABLE=flow_pla VALUE={PLA}
      select_profile PLA=1
  {% elif 'SPEED' in params %}
      SAVE_VARIABLE VARIABLE=speed_pla VALUE={SPEED}
      select_profile PLA=1
  {% elif 'P_A' in params %}
    SAVE_VARIABLE VARIABLE=p_a_pla VALUE={PLA_P_A}
    select_profile PLA=1
    { action_respond_info ("pressure advanced saved.") } 
  {% else %}
    { action_respond_info ("Must Provide parameters Flow, P.A, Retract, Unretract and retract length ") }
    {% endif %}
  {% endif %}
 {% if 'PETG' in params %}
      {% if 'RETRACT_LENGTH' in params and 'RETRACT_SPEED' in params and 'UNRETRACT_SPEED' in params %}
      SAVE_VARIABLE VARIABLE=petg_retract_length VALUE={params.RETRACT_LENGTH}
      SAVE_VARIABLE VARIABLE=petg_retract_speed VALUE={params.RETRACT_SPEED}
      SAVE_VARIABLE VARIABLE=petg_unretract_speed VALUE={params.UNRETRACT_SPEED}
      SET_RETRACTION RETRACT_LENGTH={params.RETRACT_LENGTH|default(1)}
      SET_RETRACTION RETRACT_SPEED={params.RETRACT_SPEED|default(15)}
      SET_RETRACTION UNRETRACT_SPEED={params.UNRETRACT_SPEED|default(15)}
      SAVE_VARIABLE VARIABLE=flow_petg VALUE={PETG}
      select_profile PETG=1
      {% elif 'SPEED' in params %}
      SAVE_VARIABLE VARIABLE=speed_petg VALUE={SPEED}
      select_profile PETG=1
      
      {% elif 'P_A' in params %}
      SAVE_VARIABLE VARIABLE=p_a_petg VALUE={PETG_P_A}
      select_profile PETG=1 
      { action_respond_info ("pressure advanced saved.") } 
      
      {% else %}
      { action_respond_info ("Must Provide parameters Flow, P.A, Retract, Unretract and retract length ") }
      {% endif %}
 {% endif %}
  
 {% if 'ABS' in params %}
      {% if 'RETRACT_LENGTH' in params and 'RETRACT_SPEED' in params and 'UNRETRACT_SPEED' in params %}
      SAVE_VARIABLE VARIABLE=abs_retract_length VALUE={params.RETRACT_LENGTH}
      SAVE_VARIABLE VARIABLE=abs_retract_speed VALUE={params.RETRACT_SPEED}
      SAVE_VARIABLE VARIABLE=abs_unretract_speed VALUE={params.UNRETRACT_SPEED}
      SET_RETRACTION RETRACT_LENGTH={params.RETRACT_LENGTH|default(0.6)}
      SET_RETRACTION RETRACT_SPEED={params.RETRACT_SPEED|default(30)}
      SET_RETRACTION UNRETRACT_SPEED={params.UNRETRACT_SPEED|default(30)}
      SAVE_VARIABLE VARIABLE=flow_abs VALUE={ABS}
      
      {% elif 'SPEED' in params %}
      SAVE_VARIABLE VARIABLE=speed_abs VALUE={SPEED}
      select_profile ABS=1 
    
      {% elif 'P_A' in params %}
      SAVE_VARIABLE VARIABLE=p_a_abs VALUE={ABS_P_A}
      select_profile ABS=1 
      { action_respond_info ("pressure advanced saved.") } 

      {% else %}
      { action_respond_info ("Must Provide parameters Flow, P.A, Retract, Unretract and retract length ") }
      {% endif %}
 {% endif %}
  
 {% if 'NYLON' in params %}
    {% if 'RETRACT_LENGTH' in params and 'RETRACT_SPEED' in params and 'UNRETRACT_SPEED' in params %}
    SAVE_VARIABLE VARIABLE=nylon_retract_length VALUE={params.RETRACT_LENGTH}
    SAVE_VARIABLE VARIABLE=nylon_retract_speed VALUE={params.RETRACT_SPEED}
    SAVE_VARIABLE VARIABLE=nylon_unretract_speed VALUE={params.UNRETRACT_SPEED}
    SET_RETRACTION RETRACT_LENGTH={params.RETRACT_LENGTH|default(1.2)}
    SET_RETRACTION RETRACT_SPEED={params.RETRACT_SPEED|default(40)}
    SET_RETRACTION UNRETRACT_SPEED={params.UNRETRACT_SPEED|default(40)}
    SAVE_VARIABLE VARIABLE=flow_nylon VALUE={NYLON}
    
    {% elif 'SPEED' in params %}
    SAVE_VARIABLE VARIABLE=speed_nylon VALUE={SPEED}
    select_profile NYLON=1

    
    {% elif 'P_A' in params %}
    SAVE_VARIABLE VARIABLE=p_a_nylon VALUE={NYLON_P_A}
    select_profile NYLON=1 
    { action_respond_info ("pressure advanced saved.") } 

    {% else %}
    { action_respond_info ("Must Provide parameters Flow, P.A, Retract, Unretract and retract length ") }
    {% endif %}
 {% endif %}
  
 {% if 'CARBON' in params %}
    {% if 'RETRACT_LENGTH' in params and 'RETRACT_SPEED' in params and 'UNRETRACT_SPEED' in params %}
    SAVE_VARIABLE VARIABLE=carbon_retract_length VALUE={params.RETRACT_LENGTH}
    SAVE_VARIABLE VARIABLE=carbon_retract_speed VALUE={params.RETRACT_SPEED}
    SAVE_VARIABLE VARIABLE=carbon_unretract_speed VALUE={params.UNRETRACT_SPEED}
    SET_RETRACTION RETRACT_LENGTH={params.RETRACT_LENGTH|default(1.2)}
    SET_RETRACTION RETRACT_SPEED={params.RETRACT_SPEED|default(15)}
    SET_RETRACTION UNRETRACT_SPEED={params.UNRETRACT_SPEED|default(15)}
    SAVE_VARIABLE VARIABLE=flow_carbon VALUE={CARBON}
    
    {% elif 'SPEED' in params %}
    SAVE_VARIABLE VARIABLE=speed_carbon VALUE={SPEED}
    select_profile CARBON=1 
    
    {% elif 'P_A' in params %}
    SAVE_VARIABLE VARIABLE=p_a_carbon VALUE={CARBON_P_A}
    select_profile CARBON=1 
    { action_respond_info ("pressure advanced saved.") } 
    
    {% else %}
    { action_respond_info ("Must Provide parameters Flow, P.A, Retract, Unretract and retract length ") }
    {% endif %}
 {% endif %}
  
 {% if 'PLA' not in params and 'PETG' not in params and 'ABS' not in params and 'NYLON' not in params and 'CARBON' not in params and 'P_A' not in params and 'SPEED_OVERRIDE' %}
    { action_respond_info("Error: No material or speed value specified.") }
 {% endif %}
############################################################################################################################################################




[gcode_macro Flow_calculator]
gcode:
 {% if params.EXPECTED_THICKNESS %}
  {% set expected_thickness = params.EXPECTED_THICKNESS | float %}
 {% else %}
  {% set expected_thickness = 0.0 %}
 {% endif %}

 { action_respond_info("Expected thickness: {:.2f}".format(expected_thickness)) }

 {% if params.MEASURED_THICKNESS1 or params.MEASURED_THICKNESS2 or params.MEASURED_THICKNESS3 or params.MEASURED_THICKNESS4 %}
  {% set mt1 = params.MEASURED_THICKNESS1 | float %}
  {% set mt2 = params.MEASURED_THICKNESS2 | float %}
  {% set mt3 = params.MEASURED_THICKNESS3 | float %}
  {% set mt4 = params.MEASURED_THICKNESS4 | float %}
  {% set num_measurements = [mt1, mt2, mt3, mt4] | select('!=', 0) | list | count %}
  {% if num_measurements > 0 %}
    {% if num_measurements == 4 %}
      {% set avg_mt = (mt1 + mt2 + mt3 + mt4) / 4 %}
      {% if expected_thickness != 0 %}
        {% set flow = expected_thickness / avg_mt %}
        { action_respond_info("New flow: {:.2f}".format(flow)) }
      {% else %}
        { action_respond_info("Average measured thickness: {:.2f}".format(avg_mt)) }
      {% endif %}
    {% else %}
      { action_respond_info("Error: Please provide all four measured thickness values for accurate averaging.") }
    {% endif %}
  {% else %}
    { action_respond_info("Error: At least one measured thickness value must be specified.") }
  {% endif %}
 {% else %}
  { action_respond_info("Error: No parameters specified.") }
 {% endif %}

[gcode_macro rotation_distance_calculator]
gcode:
 {% if params.PREVIOUS_ROTATION_DISTANCE %}
  {% set previous_rotation_distance = params.PREVIOUS_ROTATION_DISTANCE | float %}

  {% set measured_distance1 = params.MEASURED_DISTANCE1 | float %}
  {% set measured_distance2 = params.MEASURED_DISTANCE2 | default(0) | float %}
  {% set measured_distance3 = params.MEASURED_DISTANCE3 | default(0) | float %}
  {% set measured_distance4 = params.MEASURED_DISTANCE4 | default(0) | float %}

  {% set measured_distances = [measured_distance1, measured_distance2, measured_distance3, measured_distance4] | select('!=', 0) | list %}
  {% set num_measurements = measured_distances | count %}

  {% if num_measurements > 0 %}
    {% if num_measurements == 1 %}
      {% set measured_distance = measured_distances[0] %}
    {% else %}
      {% set measured_distance = measured_distances | sum / num_measurements %}
    {% endif %}

    {% set requested_value = params.REQUESTED_VALUE | float %}

    {% if measured_distance != 0 %}
      {% set actual_value = (previous_rotation_distance * measured_distance) / requested_value %}
      { action_respond_info("Actual value: {:.2f}".format(actual_value)) }
    {% else %}
      { action_respond_info("Error: Measured distance is zero.") }
    {% endif %}
  {% else %}
    { action_respond_info("Error: No valid measured distances provided.") }
  {% endif %}
 {% else %}
  { action_respond_info("Error: Missing parameter(s).") }
 {% endif %}




############################################################################################################################################################
###                                         MAINSAIL/FLUIDD  PAUSE / CANCEL / RESUME/ M600                                                               ###
############################################################################################################################################################
[pause_resume]
recover_velocity: 110
[display_status]
[respond]

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : -125.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 12.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 1.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 20.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 20  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 0.0 ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 0.0  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : True ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 86400     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
gcode:

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE
  G28

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_restore_idle_timeout: 0
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0%}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
  {% endif %}
  {% if printer.idle_timeout.state|upper == "IDLE" %}
    {% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}
  {% endif %}
  _CLIENT_EXTRUDE
  RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='Extruder not hot enough'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro M600]
gcode:
  {% if 'U' in params and 'X' in params and 'Y' in params and 'E' in params and 'Z' in params %}
    ##### set defaults #####
    {% set x = params.X|default(0) %}      # edit to your park position
    {% set y = params.Y|default(-125) %}   # edit to your park position
    {% set z = params.Z|default(10)|float %} # edit to your park position
    {% set e = params.E|default(1) %}      # edit to your retract length
    {% set l = params.L|default(80) %}     # edit to your retract length
    {% set filament_unload_speed = 10 * 60 %}       # edit to your retract length
    {% set filament_initial_retract_speed = 5 * 60 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definition #####

    PAUSE_BASE
    G90
    G1 X{x} Y{y} F6000
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E-{e} F{filament_initial_retract_speed}
      G1 E-{l} F{filament_unload_speed}

    {% else %}
      { action_respond_info("Extruder not hot enough") }
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F6000
      G90
    {% else %}
      { action_respond_info("Printer not homed") }
    {% endif %}
    
  {% elif 'L' in params and 'X' in params and 'Y' in params and 'E' in params and 'Z' in params %}
    ##### set defaults #####
    {% set x = params.X|default(0) %}      # edit to your park position
    {% set y = params.Y|default(-125) %}   # edit to your park position
    {% set z = params.Z|default(10)|float %} # edit to your park position
    {% set e = params.E|default(1) %}      # edit to your retract length
    {% set l = params.L|default(80) %}     # edit to your retract length
    {% set filament_initial_load_speed = 10 * 60 %}       # edit to your retract length
    {% set filament_purge_speed = 5 * 60 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definition #####

    PAUSE_BASE
    G90
    G1 X{x} Y{y} F6000
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{e} F{filament_initial_load_speed}
      G1 E{l} F{filament_purge_speed}
    {% else %}
      { action_respond_info("Extruder not hot enough") }
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe}
      G90
    {% else %}
      { action_respond_info("Printer not homed") }
    {% endif %}
    
  {% else %}
    PAUSE X=0 Y=-125 Z_MIN=50
    UNLOAD_FILAMENT
  {% endif %}
  
########################################################################################################################################################################################################

[gcode_macro _end]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE1']|default({}) %}
  {% set velocity = (100) *60 %}
  {% set use_custom     = client.use_custom_pos|default(True)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(-20.0) %}
  {% set custom_park_y  = client.custom_park_y|default(-20.0) %}
  {% set park_dz        = client.custom_park_dz|default(10.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(10) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = (100) *60 %}
  {% set use_custom     = client.use_custom_pos|default(True)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(0.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(10) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
    G28
    M104 S40
    M104 S0
    M140 S0 ;heated bed heater off
    M107  ;fan off
    M84 ;steppers off
    G90 ;absolute positioning

############################################################################################################################################################
#[safe_z_home]
#home_xy_position: 0,0

[homing_override]
gcode:
  {% set CONFIG_A = printer.configfile.settings['tmc2209 stepper_a'].run_current|float %}
  {% set CONFIG_B = printer.configfile.settings['tmc2209 stepper_b'].run_current|float %}
  {% set CONFIG_C = printer.configfile.settings['tmc2209 stepper_c'].run_current|float %}
  {% set current = 1.138 %}
  {% set mode = 1.138 %}
  StealthChop #Note config should be in spreadcycle by default. 
  SET_VELOCITY_LIMIT velocity=105 
  SET_TMC_CURRENT STEPPER=stepper_a CURRENT={current} 
  SET_TMC_CURRENT STEPPER=stepper_b CURRENT={current}
  SET_TMC_CURRENT STEPPER=stepper_c CURRENT={current}
  G28
  #SET_LED LED="effector" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
  SET_TMC_CURRENT STEPPER=stepper_a CURRENT={CONFIG_A} 
  SET_TMC_CURRENT STEPPER=stepper_b CURRENT={CONFIG_B} 
  SET_TMC_CURRENT STEPPER=stepper_c CURRENT={CONFIG_C} 
  StealthChop
  {% if printer.toolhead.max_velocity %}
  SET_VELOCITY_LIMIT velocity={printer.toolhead.max_velocity}
  {% else %}
  SET_VELOCITY_LIMIT velocity={printer.configfile.settings.printer.max_velocity}
  {% endif %}
  StealthChop   


############################################################################################################################################################
###                                                BACKEND / ADVANCED / MISC                                                                             ###
############################################################################################################################################################



[delayed_gcode Back_End]
initial_duration: 7
gcode:  
  {% if printer.save_variables.variables.z_offset %}
  {% set zoffset = printer.save_variables.variables.z_offset %}
  SET_GCODE_OFFSET {% for axis, offset in zoffset.items() if zoffset[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
  { action_respond_info("Loaded Z offset from saved variables [%s]" % (zoffset)) }
  {% endif %}
  {% set rotation_distance = printer.save_variables.variables.extruder_rotation_distance %}
  SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder DISTANCE={rotation_distance|default(25)}
  M117 Extruder Rotation distance {rotation_distance}
  {% set svv = printer.save_variables.variables %}
    {% if svv.calibration_active == 0 %} # If calibration wasn't stopped early, run calibration at boot
      M117 Preheating bed
      M190 S{svv.bed_temp}
      M117 Running delta calibrate 
      { action_respond_info ("Running Delta_calibrate") }
      SAVE_VARIABLE VARIABLE=calibration_active VALUE=10
      _DELTA_CALIBRATE_SAFE
      M400 
      SAVE_VARIABLE VARIABLE=calibration_active VALUE=1
      { action_respond_info ("Delta_calibrate complete") }
      G4 P6000 
      SAVE_CONFIG 
    {% elif svv.calibration_active == 1 %}
      { action_respond_info ("Probing bed_mesh...") }
      M117 probing Bed_mesh...
      SAVE_VARIABLE VARIABLE=calibration_active VALUE=10
      M190 S{svv.bed_temp}
      M117 Preheat finished calibrating bed mesh 
      _CALIBRATE_BED_MESH
      M117 Bed_mesh complete
      G4 P10
      { action_respond_info ("Bed_mesh complete") }
      SAVE_VARIABLE VARIABLE=calibration_active VALUE=3
      G4 P6000 
      SAVE_CONFIG
    {% elif svv.calibration_active == 3 %}
      {% if svv.shaper_active == 1 %}
        { action_respond_info ("Calibrating shaper if adxl is not present or runs into a error reboot to continue remainaing calibrations. shaper will disabled the next time calibrate macro is run until renabled.") }
        M117 Calibrating inputshaper...
        SAVE_VARIABLE VARIABLE=calibration_active VALUE=4
        SAVE_VARIABLE VARIABLE=shaper_active VALUE=0
        G28
        SHAPER_CALIBRATE
        SAVE_VARIABLE VARIABLE=shaper_active VALUE=1
        SAVE_VARIABLE VARIABLE=calibration_active VALUE=4
        { action_respond_info ("Shaper calibration passed") }
        M117 Shaper calibration complete
        G4 P 4000 
        SAVE_CONFIG 
      {% elif svv.shaper_active == 0 %}
        { action_respond_info ("Shaper calibration failed or not enabled, check adxl config is enabled otherwise check wires. Continuing remaining calibration.") }
        SAVE_VARIABLE VARIABLE=shaper_active VALUE=0
        SAVE_VARIABLE VARIABLE=calibration_active VALUE=4
             {% if svv.pidtune_bed_on_off == 1 %}
             { action_respond_info ("Pidtuning Bed. Run Pid_hotend macro after calibate macro is complete. This is seperate to avoid melted probes etc.") }
             SAVE_VARIABLE VARIABLE=calibration_active VALUE=10
             M117 Pidtuning bed  
             { action_respond_info ("Pidtuning bed") }
             PID_Bed
             G28
             { action_respond_info ("Calibration complete. Ready to print Reminder to remove probe.") }
             G4 P6000
             SAVE_CONFIG 
             {% endif %}
      {% else %}
             G4 P1000
             SAVE_VARIABLE VARIABLE=shaper_active VALUE=0
             SAVE_VARIABLE VARIABLE=calibration_active VALUE=4
             { action_respond_info ("Shaper calibration failed or not enabled, check adxl config is enabled otherwise check wires. Continuing remaining calibration.") }
             SAVE_CONFIG
            {% endif %}       
    {% elif svv.calibration_active == 4 %}
        {% if svv.pidtune_bed_on_off == 1 %}
           { action_respond_info ("Pidtuning Bed. Run Pid_hotend macro after calibate macro is complete. This is seperate to avoid melted probes etc.") }
           SAVE_VARIABLE VARIABLE=calibration_active VALUE=10
           M117 Pidtuning bed  
           { action_respond_info ("Pidtuning bed") }
           PID_Bed
           G28
           { action_respond_info ("Calibration complete. Ready to print Reminder to remove probe.") }
           G4 P3000
           Save_config 
        {% elif svv.pidtune_bed_on_off == 0 %}
           { action_respond_info ("pidtune_bed skipped. calibration complete. Reminder to remove probe") }
         SAVE_VARIABLE VARIABLE=calibration_active VALUE=10
        {% else %}
           { action_respond_info ("pidtune_bed skipped. calibration complete. Reminder to remove probe") }
           SAVE_VARIABLE VARIABLE=calibration_active VALUE=10
        {% endif %}
           SAVE_VARIABLE VARIABLE=calibration_active VALUE=10
    {% else %}
      SAVE_VARIABLE VARIABLE=calibration_active VALUE=10
    {% endif %}
      {% set shaper_x = printer.configfile.settings.input_shaper.shaper_freq_x %}
      {% set shaper_y = printer.configfile.settings.input_shaper.shaper_freq_y %}
      {% set shapertype_x = printer.configfile.settings.input_shaper.shaper_type_x %}
      {% set shapertype_y = printer.configfile.settings.input_shaper.shaper_type_y %}
      BED_MESH_PROFILE LOAD="default"
      M117 ShaperX={shaper_x} ShaperY={shaper_y} ShapertypeX={shapertype_x} ShapertypeY={shapertype_y} E rotation distance={svv.extruder_rotation_distance}
      {% if svv.flow_pla_active == 1 %}
       { action_respond_info ("Flow pla active") }
       select_profile PLA=1
      {% elif svv.flow_petg_active == 1 %}
       { action_respond_info ("Flow petg active") }
       select_profile PETG=1
      {% elif svv.flow_abs_active == 1 %}
       { action_respond_info ("Flow abs active") }
       select_profile ABS=1
      {% elif svv.flow_nylon_active == 1 %}
       { action_respond_info ("Flow nylon active") }
       select_profile NYLON=1
      {% elif svv.flow_carbon_active == 1 %}
       { action_respond_info ("Flow carbon active") }
       select_profile CARBON=1
      {% elif svv.flow_pla_active == 1 and svv.flow_petg_active == 1 and svv.flow_abs_active == 1 and svv.flow_nylon_active == 1 %}
      {% endif %}

[gcode_macro M500]
gcode:
     {% set svv = printer.save_variables.variables %}
     {% set shaper_x = printer.configfile.settings.input_shaper.shaper_freq_x %}
     {% set shaper_y = printer.configfile.settings.input_shaper.shaper_freq_y %}
     {% set shapertype_x = printer.configfile.settings.input_shaper.shaper_type_x %}
     {% set shapertype_y = printer.configfile.settings.input_shaper.shaper_type_y %}
     {% set svv = printer.save_variables.variables %}
     {% set blob_default = svv.blob_default %}
     {% set calibration_active = svv.calibration_active %}
     {% set extruder_load = svv.extruder_load %}
     {% set extruder_rotation_distance = svv.extruder_rotation_distance %}
     {% set extruder_unload = svv.extruder_unload %}
     {% set initial_z_height = svv.initial_z_height %}
     {% set prime_active = svv.prime_active %}
     {% set shaper_active = svv.shaper_active %}
     {% set voron_mobius_m4_bowden = svv.voron_mobius_m4_bowden %}

     { action_respond_info("Loaded Z offset from saved variables {}".format(svv.z_offset)) }

     { action_respond_info("Run Current: 0.89A Hold Current: 0.89A") }

     { action_respond_info("Extruder 'extruder' rotation distance set to {}".format(extruder_rotation_distance)) }

     { action_respond_info("bed_temp={}, blob_default={}, blob_extrude_length={}, blob_extrude_speed={}, bmg={}, calibration_active={}, custom={}, extruder_load={}, extruder_unload={}, filament_load_speed={}, phaetus_apus={}, prime_active={}, shaper_active={}, slight_purge_amount={}, slight_purge_speed={}, stock_v400={}, voron_mobius_m4_bowden={}".format(printer.configfile.settings.bed_temp, blob_default, svv.blob_extrude_length, svv.blob_extrude_speed, svv.bmg, calibration_active, svv.custom, extruder_load, extruder_unload, svv.filament_load_speed, svv.phaetus_apus, prime_active, shaper_active, svv.slight_purge_amount, svv.slight_purge_speed, svv.stock_v400, voron_mobius_m4_bowden)) }

     { action_respond_info("Other Variables:") }
     { action_respond_info("abs_retract_length={}, abs_retract_speed={}, abs_unretract_speed={}, carbon_retract_length={}, carbon_retract_speed={}, carbon_unretract_speed={}, nylon_retract_length={}, nylon_retract_speed={}, nylon_unretract_speed={}, petg_retract_length={}, petg_retract_speed={}, petg_unretract_speed={}, pla_retract_length={}, pla_retract_speed={}, pla_unretract_speed={}".format(svv.abs_retract_length, svv.abs_retract_speed, svv.abs_unretract_speed, svv.carbon_retract_length, svv.carbon_retract_speed, svv.carbon_unretract_speed, svv.nylon_retract_length, svv.nylon_retract_speed, svv.nylon_unretract_speed, svv.petg_retract_length, svv.petg_retract_speed, svv.petg_unretract_speed, svv.pla_retract_length, svv.pla_retract_speed, svv.pla_unretract_speed)) }

     { action_respond_info("Retraction Variables:") }
     { action_respond_info("flow_abs={}, flow_abs_active={}, flow_carbon={}, flow_carbon_active={}, flow_nylon={}, flow_nylon_active={}, flow_petg={}, flow_petg_active={}, flow_pla={}, flow_pla_active={}".format(svv.flow_abs, svv.flow_abs_active, svv.flow_carbon, svv.flow_carbon_active, svv.flow_nylon, svv.flow_nylon_active, svv.flow_petg, svv.flow_petg_active, svv.flow_pla, svv.flow_pla_active)) }
     M117 ShaperX={shaper_x} ShaperY={shaper_y} ShapertypeX={shapertype_x} ShapertypeY={shapertype_y} E rotation distance={svv.extruder_rotation_distance}
     BED_MESH_PROFILE LOAD=default

[gcode_macro CALIBRATE] #v2.0 collab with Rootiest 
gcode:
   { action_respond_info ("Calibrating endstop phase") }
   M117 Calibrating endstop phase
   SAVE_VARIABLE VARIABLE=bed_temp VALUE='"{printer.heater_bed.target}"'
   SAVE_VARIABLE VARIABLE=calibration_active VALUE=3
   G28
   G91
   G0 Z-80 F1500
   G28
   G91
   G0 Z-80 F1500
   G28
   G91
   G0 Z-80 F1500
   G28
   G91
   G0 Z-80 F1500
   G28
   G91
   G0 Z-80 F1500
   ENDSTOP_PHASE_CALIBRATE stepper=stepper_a
   ENDSTOP_PHASE_CALIBRATE stepper=stepper_b
   ENDSTOP_PHASE_CALIBRATE stepper=stepper_c
   M400
   G28
   SAVE_VARIABLE VARIABLE=calibration_active VALUE=0
   M117 calibrating endstop phase complete 
   { action_respond_info ("Calibrating endstop complete") }
   G4 P6000
   SAVE_CONFIG 

[gcode_macro CALIBRATE_SETTINGS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set PIDTUNE_BED_ON_OFF = params.PIDTUNE_BED_ON_OFF|default(0) %}
    {% if 'PIDTUNE_BED_ON_OFF' in params and params['PIDTUNE_BED_ON_OFF'] == "1" %}
    SAVE_VARIABLE VARIABLE=pidtune_bed_on_off VALUE=1
    {% elif 'PIDTUNE_BED_ON_OFF' in params and params['PIDTUNE_BED_ON_OFF'] == "0" %}
    SAVE_VARIABLE VARIABLE=pidtune_bed_on_off VALUE=0
    {% else %}
    {% endif %}
    
    {% if 'SHAPER_ON_OFF' in params and params['SHAPER_ON_OFF'] == '1' %}
    SAVE_VARIABLE VARIABLE=shaper_active VALUE=1
    {% elif 'SHAPER_ON_OFF' in params and params['SHAPER_ON_OFF'] == '0' %}
    SAVE_VARIABLE VARIABLE=shaper_active VALUE=0
    {% else %}
    {% endif %} 
    
    {% if 'INITIAL_Z_HEIGHT' in params %}
    {% set initial_z_height = params.INITIAL_Z_HEIGHT|default(1)|float %}
    {% if initial_z_height < 0.5 %}
    {% set initial_z_height = 0.5 %}
    {% elif initial_z_height > 5.0 %}
    {% set initial_z_height = 5.0 %}
    {% endif %}
    SET_GCODE_OFFSET Z_ADJUST={ initial_z_height } MOVE=0 
    SAVE_VARIABLE VARIABLE=initial_z_height VALUE={ initial_z_height }
    {% else %}
    {% endif %}
    


[gcode_macro _DELTA_CALIBRATE_SAFE]
gcode: 
  {% set svv = printer.save_variables.variables %}
  {% set CONFIG_A = printer.configfile.settings['tmc2209 stepper_a'].run_current|float %}
  {% set CONFIG_B = printer.configfile.settings['tmc2209 stepper_b'].run_current|float %}
  {% set CONFIG_C = printer.configfile.settings['tmc2209 stepper_c'].run_current|float %}
  {% set SAFE = 0.800 %}
   G28
   G91
   SET_GCODE_OFFSET Z=0 MOVE=0
   g0 z-150 F6000 #40 stock 
   SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1
   SET_VELOCITY_LIMIT ACCEL=650
   SET_VELOCITY_LIMIT VELOCITY=50
   SET_TMC_CURRENT STEPPER=stepper_a CURRENT={SAFE} 
   SET_TMC_CURRENT STEPPER=stepper_b CURRENT={SAFE}
   SET_TMC_CURRENT STEPPER=stepper_c CURRENT={SAFE}
   DELTA_CALIBRATE
   M400
   G0 Z20 F3000
   G0 Y0 F7800
   G0 X0 F7800
   G28       
   {% if svv.initial_z_height %}
   SET_GCODE_OFFSET Z_ADJUST={svv.initial_z_height} MOVE=0 
   {% else %}
   SET_GCODE_OFFSET Z_ADJUST=1.0 MOVE=0 
   {% endif %}
  
[gcode_macro _CALIBRATE_BED_MESH]
gcode: 
  {% set svv = printer.save_variables.variables %}
  {% set CONFIG_A = printer.configfile.settings['tmc2209 stepper_a'].run_current|float %}
  {% set CONFIG_B = printer.configfile.settings['tmc2209 stepper_b'].run_current|float %}
  {% set CONFIG_C = printer.configfile.settings['tmc2209 stepper_c'].run_current|float %}
  {% set SAFE = 0.85 %}
 G28
 SET_GCODE_OFFSET Z=0 MOVE=0
 SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1
 SET_VELOCITY_LIMIT ACCEL=650
 SET_VELOCITY_LIMIT VELOCITY=80
 SET_TMC_CURRENT STEPPER=stepper_a CURRENT={SAFE} 
 SET_TMC_CURRENT STEPPER=stepper_b CURRENT={SAFE}
 SET_TMC_CURRENT STEPPER=stepper_c CURRENT={SAFE}
 BED_MESH_CALIBRATE
 G1 Z50 F3000
 G1 X0 F7800
 G1 Y0 F7800
 G28
 SET_TMC_CURRENT STEPPER=stepper_a CURRENT={CONFIG_A} 
 SET_TMC_CURRENT STEPPER=stepper_b CURRENT={CONFIG_B} 
 SET_TMC_CURRENT STEPPER=stepper_c CURRENT={CONFIG_C} 
 M117 Calibration Complete 
# SAVE_VARIABLE VARIABLE=calibration_active VALUE=10
 SAVE_VARIABLE VARIABLE=bed_temp VALUE='"{0}"'
  {% if svv.initial_z_height %}
   SET_GCODE_OFFSET Z_ADJUST={svv.initial_z_height} MOVE=0 
   {% else %}
   SET_GCODE_OFFSET Z_ADJUST=+0.5 MOVE=0 
   {% endif %}
 SET_VELOCITY_LIMIT velocity={printer.configfile.settings.printer.max_velocity}
 SAVE_CONFIG
  
[gcode_macro SET_GCODE_OFFSET] #Delta adjust version of Mental's macro 
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.z_offset %}
        {% set zoffset = printer.save_variables.variables.z_offset %}
    {% else %} 
        {% set zoffset = {'z': None} %}
    {% endif %}
    {% set ns = namespace(zoffset={'z': zoffset.z}) %}
     _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
    {%if 'Z' in params %}{% set null = ns.zoffset.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.zoffset.z == None %}{% set null = ns.zoffset.update({'z': 0}) %}{% endif %}
        {% set null = ns.zoffset.update({'z': (ns.zoffset.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=z_offset VALUE="{ns.zoffset}"
############################################################################################################################################################
#IF ENABLED KEEP WALL ACCELERATION THE SAME WITH PRESSURE ADVANCE THIS ALSO APPLIES TO M205. DO NOT FORGET KLIPPER DOES NOT USE JERK THE VALUES ARE NOT THE SAME AND SCALE WITH ACC. 
#THIS IS BOTH FOR COMPATABILITY WITH CERTAIN SLICERS AND FOR DYNAMIC ACC 

[gcode_macro M205] #desuu macro 
#rename_existing: M205.1
gcode:
 {% if 'X' in params %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
 SAVE_VARIABLE VARIABLE=m205 VALUE={params.X}
 {% elif 'Y' in params %}
  SAVE_VARIABLE VARIABLE=m205 VALUE={params.X}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  SAVE_VARIABLE VARIABLE=m205 VALUE={params.X}
 {% elif 'Z' in params %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Z}
  SAVE_VARIABLE VARIABLE=m205 VALUE={params.X}
 {% elif 'XYZ' in params %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.XYZ}
  SAVE_VARIABLE VARIABLE=m205 VALUE={params.X}
 {% endif %}

[gcode_macro M566]
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X | float / 60}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y | float / 60}
  {% elif 'Z' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Z | float / 60}
  {% elif 'XYZ' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.XYZ | float / 60}
  {% endif %}




[gcode_macro M204] #desuu macro 
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}
############################################################################################################################################################
[gcode_macro Pid_bed]
gcode:
  {% set T2 = (100) %} #DEFAULT BED TEMP
  {% if 'BED_TEMP' in params %}
  M117 PIDTuning bed...
  PID_CALIBRATE HEATER=heater_bed TARGET={params.BED_TEMP|default(100)}
  M117 Pidtune complete 
  SAVE_CONFIG 
  {% else %}
  M117 PIDTuning bed...
  PID_CALIBRATE HEATER=heater_bed TARGET={T2}
  M117 Pidtune complete 
  { action_respond_info ("pid_bed requires manual save_config if not using calibrate_macro or temp not specified with the pulldown tab") }
  {% endif %}
############################################################################################################################################################
[gcode_macro Pid_Hotend]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set F2 = (128) %} #DEFAULT FAN SPEED
  {% set T2 = (245) %} #DEFAULT HOTEND TEMP
  {% set F = svv.pid_fan_speed  %} #DEFAULT FAN SPEED
  {% set T = svv.pid_hotend_temp %} #DEFAULT HOTEND TEMP
  {% if 'FAN_SPEED' in params and 'HOTEND_TEMP' in params %}
  M117 Pidtuning... 
 { action_respond_info ("Pidtuning...") }
  G28
  G91
  M106 S{params.FAN_SPEED}
  G1 Z-50 F1500
  PID_CALIBRATE HEATER=extruder TARGET={params.HOTEND_TEMP|default(245)}
  M117 Pidtune complete 
  G28
  SAVE_VARIABLE VARIABLE=pid_hotend VALUE={params.HOTEND_TEMP}
  SAVE_VARIABLE VARIABLE=pid_fan_speed VALUE={params.FAN_SPEED}
 { action_respond_info ("pid_hotend complete") }
  SAVE_CONFIG   
  {% elif 'HOTEND_TEMP' in params %}
  M117 Pidtuning... 
 { action_respond_info ("Pidtuning...") }
  G28
  G91
  M106 S{F}
  G1 Z-50 F1500
  PID_CALIBRATE HEATER=extruder TARGET={params.HOTEND_TEMP|default(245)}
  M117 Pidtune complete
  G28
 { action_respond_info ("pid_hotend complete") }
  SAVE_CONFIG   
  {% elif 'FAN_SPEED' in params %}
  M117 Pidtuning... 
 { action_respond_info ("Pidtuning...") }
  G28
  G91
  M106 S{params.FAN_SPEED|default(128)}
  G1 Z-50 F1500
  PID_CALIBRATE HEATER=extruder TARGET={T2}
  M117 Pidtune complete
  G28
 { action_respond_info ("Pid_hotend complete") }
  SAVE_CONFIG
 {% else %}
  M117 Pidtuning... 
  G28
  G91
  M106 S{F2}
  G1 Z-50 F1500
  PID_CALIBRATE HEATER=extruder TARGET={T2}
  M117 Pidtune complete
  G28
  { action_respond_info ("pid_hotend requires manual save_config if not using calibrate_macro or temp not specificed with the pulldown tab") }
 #SAVE_CONFIG   
  {% endif %}

  


############################################################################################################################################################
###                                   MISC SENSORS / AUXILARY HARDWARE/ optional features remove # to enable                                             ###
############################################################################################################################################################
[endstop_phase stepper_a]
endstop_align_zero: false
[endstop_phase stepper_b]
endstop_align_zero: false
[endstop_phase stepper_c]
endstop_align_zero: false 

[gcode_arcs]
resolution: 0.1

[gcode_macro Input_shaper_settings]
gcode: 

  {% set svv = printer.save_variables.variables %}
  {% set x = printer.configfile.settings.input_shaper.shaper_freq_x %}
  {% set y = printer.configfile.settings.input_shaper.shaper_freq_y %}
  {% set tx = printer.configfile.settings.input_shaper.shaper_type_x %}
  {% set ty = printer.configfile.settings.input_shaper.shaper_type_y %}
  {% set SHAPER_OFF_ON = params.SHAPER_OFF_ON %}
  {% set SHAPER_CALIBRATE = params.SHAPER_CALIBRATE %}
  {% set SHAPER_FRQ_X = params.SHAPER_FRQ_X %}
  {% set SHAPER_FRQ_Y = params.SHAPER_FRQ_Y %}
  {% set SHAPER_TYPE_X = params.SHAPER_TYPE_X %}
  {% set SHAPER_TYPE_Y = params.SHAPER_TYPE_Y %}
  {% set MEASURE_NOISE = params.MEASURE_NOISE %}
  {% if 'SHAPER_OFF_ON' in params and params.SHAPER_OFF_ON == '0' %}
     #SAVE_VARIABLE VARIABLE=shaper_x VALUE={x} 
     #SAVE_VARIABLE VARIABLE=shaper_y VALUE={y}
   SET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0
   M117 current shaper x=0 y=0 SHAPER OFF 
  {% elif 'SHAPER_OFF_ON' in params and params.SHAPER_OFF_ON == '1' %}
   SET_INPUT_SHAPER SHAPER_FREQ_X={x} SHAPER_FREQ_Y={y} SHAPER_TYPE_X={tx} SHAPER_TYPE_Y={ty}
   M117 {printer.configfile.settings.input_shaper.shaper_freq_x} {printer.configfile.settings.input_shaper.shaper_freq_y}
  {% else %}
    M117 MUST SELECT 0 OR 1. 1 = ON 0=OFF 
  {% endif %}
  
  {% if 'SHAPER_FRQ_X' in params and 'SHAPER_FRQ_Y' in params %}
   SET_INPUT_SHAPER SHAPER_FREQ_X={params.SHAPER_FRQ_X} SHAPER_FREQ_Y={params.SHAPER_FRQ_Y}
  {% else %}
   M117 MUST SELECT FILL OUT SHAPER X AND Y 
  {% endif %}
  
  {% if 'SHAPER_TYPE_X' in params and 'SHAPER_TYPE_Y' in params %}
   SET_INPUT_SHAPER SHAPER_TYPE_X={params.SHAPER_TYPE_X} SHAPER_TYPE_Y={params.SHAPER_TYPE_Y}
  {% else %}
   M117 MUST FILL OUT SHAPE TYPE X AND Y 
  {% endif %}
  
  {% if 'SHAPER_CALIBRATE' in params and params.SHAPER_CALIBRATE == '1' %}
    G28
    MEASURE_AXES_NOISE
    SHAPER_CALIBRATE
  {% else %}
   M117 MUST BE THE only box with a value. use value 1 to run calibration  
  {% endif %}
  
  {% if 'MEASURE_NOISE' in params and params.MEASURE_NOISE == '1' %}
    G28
    MEASURE_AXES_NOISE
  {% else %}
   M117 MUST BE THE only box with a value. use value 1 to run calibration  
  {% endif %}


[gcode_macro SpreadCycle]
gcode:
  SET_TMC_FIELD FIELD=TPWMTHRS VALUE=0 STEPPER=stepper_a
  SET_TMC_FIELD STEPPER=stepper_a FIELD=en_spreadCycle VALUE=1
  SET_TMC_FIELD FIELD=TPWMTHRS VALUE=0 STEPPER=stepper_c
  SET_TMC_FIELD STEPPER=stepper_c FIELD=en_spreadCycle VALUE=1
  SET_TMC_FIELD FIELD=TPWMTHRS VALUE=0 STEPPER=stepper_b
  SET_TMC_FIELD STEPPER=stepper_b FIELD=en_spreadCycle VALUE=1


[gcode_macro StealthChop]
gcode:
 SET_TMC_FIELD FIELD=TPWMTHRS VALUE=0 STEPPER=stepper_a
 SET_TMC_FIELD STEPPER=stepper_a FIELD=en_spreadCycle VALUE=0
 SET_TMC_FIELD FIELD=TPWMTHRS VALUE=0 STEPPER=stepper_c
 SET_TMC_FIELD STEPPER=stepper_c FIELD=en_spreadCycle VALUE=0
 SET_TMC_FIELD FIELD=TPWMTHRS VALUE=0 STEPPER=stepper_b
 SET_TMC_FIELD STEPPER=stepper_b FIELD=en_spreadCycle VALUE=0
 
[gcode_macro Performance] #450 watt psu and,larger heater cartridge or 'pure stock" with 40 watt heater cartridge 
gcode:
  {% set CONFIG_A = printer.configfile.settings['tmc2209 stepper_a'].run_current|float %}
  {% set CONFIG_B = printer.configfile.settings['tmc2209 stepper_b'].run_current|float %}
  {% set CONFIG_C = printer.configfile.settings['tmc2209 stepper_c'].run_current|float %}
  {% set SAFE = 1.414 %}
  SET_TMC_CURRENT STEPPER=stepper_a CURRENT={SAFE} 
  SET_TMC_CURRENT STEPPER=stepper_b CURRENT={SAFE}
  SET_TMC_CURRENT STEPPER=stepper_c CURRENT={SAFE}


[gcode_macro PRIME_SR]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if svv.prime_active == 8 %}
    { action_respond_info("priming blob1") }
    _prime1
    {% if svv.blob_retract_length %}
      G1 E{svv.blob_retract_length}
      G92 E0
    {% elif G10 %}
      G10
      G92 E0
    {% else %}
      G1 E-0.5
      G92 E0
    {% endif %}
      M400
    { action_respond_info("Primeblob1 complete") }
    SAVE_VARIABLE VARIABLE=prime_active VALUE=1
  {% elif svv.prime_active == 1 %}
    { action_respond_info("priming blob2") }
    _prime2
    {% if svv.blob_retract_length %}
      G1 E{svv.blob_retract_length}
      G92 E0
    {% elif G10 %}
      G10
      G92 E0
    {% else %}
      G1 E-0.5
      G92 E0
    {% endif %}
      M400
    { action_respond_info("Primeblob2 complete") }
    SAVE_VARIABLE VARIABLE=prime_active VALUE=2
  {% elif svv.prime_active == 2 %}
    { action_respond_info("priming blob3") }
    _prime3
    {% if svv.blob_retract_length %}
      G1 E{svv.blob_retract_length}
      G92 E0
    {% elif G10 %}
      G10
      G92 E0
    {% else %}
      G1 E-0.5
      G92 E0
    {% endif %}
      M400
    { action_respond_info("Primeblob3 complete") }
    SAVE_VARIABLE VARIABLE=prime_active VALUE=3
  {% elif svv.prime_active == 3 %}
    { action_respond_info("priming blob4") }
    _prime4
    {% if svv.blob_retract_length %}
      G1 E{svv.blob_retract_length}
      G92 E0
    {% elif G10 %}
      G10
      G92 E0
    {% else %}
      G1 E-0.5
      G92 E0
    {% endif %}
      M400
    { action_respond_info("Primeblob4 complete") }
    SAVE_VARIABLE VARIABLE=prime_active VALUE=4
  {% elif svv.prime_active == 4 %}
    { action_respond_info("priming blob5") }
    _prime5
    {% if svv.blob_retract_length %}
      G1 E{svv.blob_retract_length}
      G92 E0
    {% elif G10 %}
      G10
      G92 E0
    {% else %}
      G1 E-0.5
      G92 E0
    {% endif %}
      M400
    { action_respond_info("Primeblob5 complete") }
    SAVE_VARIABLE VARIABLE=prime_active VALUE=5
  {% elif svv.prime_active == 5 %}
    { action_respond_info("priming blob6") }
    _prime6
    {% if svv.blob_retract_length %}
      G1 E{svv.blob_retract_length}
      G92 E0
    {% elif G10 %}
      G10
      G92 E0
    {% else %}
      G1 E-0.5
      G92 E0
    {% endif %}
      M400
    { action_respond_info("Primeblob6 complete") }
    SAVE_VARIABLE VARIABLE=prime_active VALUE=6
  {% elif svv.prime_active == 6 %}
    { action_respond_info("priming blob7") }
    _prime7
    {% if svv.blob_retract_length %}
      G1 E{svv.blob_retract_length}
      G92 E0
    {% elif G10 %}
      G10
      G92 E0
    {% else %}
      G1 E-0.5
      G92 E0
    {% endif %}
      M400
    { action_respond_info("Primeblob7 complete") }
    SAVE_VARIABLE VARIABLE=prime_active VALUE=7
  {% elif svv.prime_active == 7 %}
    { action_respond_info("priming blob8") }
    _prime8
    {% if svv.blob_retract_length %}
      G1 E{svv.blob_retract_length}
      G92 E0
    {% elif G10 %}
      G10
      G92 E0
    {% else %}
      G1 E-0.5
      G92 E0
    {% endif %}
      M400
    { action_respond_info("Primeblob8 complete") }
    SAVE_VARIABLE VARIABLE=prime_active VALUE=8
  {% else %}
    { action_respond_info("Enforce initial blob") }
    { action_respond_info("priming blob1") }
    SAVE_VARIABLE VARIABLE=prime_active VALUE=8
    _prime1
    {% if svv.blob_retract_length %}
      G10
      G92 E0
    {% elif G10 %}
      G10
      G92 E0
    {% else %}
      G1 E-0.5
      G92 E0
    {% endif %}
    { action_respond_info("Primeblob1 complete") }
  {% endif %}


[gcode_macro PRIME_BLOB_SETTINGS] 
gcode:
 {% if 'AMOUNT' in params and 'SPEED' in params and 'BLOB_RETRACT_LENGTH' %}
 SAVE_VARIABLE VARIABLE=blob_extrude_speed VALUE={params.SPEED|default(5)}
 SAVE_VARIABLE VARIABLE=blob_extrude_length VALUE={params.AMOUNT|default(40)}
 SAVE_VARIABLE VARIABLE=blob_retract_length VALUE={params.BLOB_RETRACT_LENGTH}
 SAVE_VARIABLE VARIABLE=blob_default VALUE=0
 {% elif 'AMOUNT' in params %}
 SAVE_VARIABLE VARIABLE=blob_extrude_speed VALUE={5}
 SAVE_VARIABLE VARIABLE=blob_extrude_length VALUE={params.AMOUNT|default(40)}
 SAVE_VARIABLE VARIABLE=blob_default VALUE=0
 {% elif 'SPEED' in params %}
 SAVE_VARIABLE VARIABLE=blob_extrude_speed VALUE={params.SPEED|default(5)}
 SAVE_VARIABLE VARIABLE=blob_extrude_length VALUE=60
 SAVE_VARIABLE VARIABLE=blob_default VALUE=0
 {% elif 'BLOB_RETRACT_LENGTH' in params %}
 SAVE_VARIABLE VARIABLE=blob_retract_length VALUE={params.BLOB_RETRACT_LENGTH|default(0.6)}
 {% else %}
 SAVE_VARIABLE VARIABLE=blob_default VALUE=1
 {% endif %}

[gcode_macro _PRIME_BLOB_EXTRUDE_LENGTH] 
gcode:
 {% set svv = printer.save_variables.variables %}
 {% set amount = svv.blob_extrude_length %}
 {% set speed = svv.blob_extrude_speed %}
 {% if svv.blob_default == 0 %}
 SAVE_GCODE_STATE NAME=load_state
 M117 Priming Blob
 G91
 G92 E0 
 G1 E{amount} F{speed*60} #extrude length F=extrudespeed in mm/min
 RESTORE_GCODE_STATE NAME=load_state
 {% else %}
 SAVE_GCODE_STATE NAME=load_state
 M117 Priming blob
 G91
 G92 E0 
 G1 E40 F400 
 RESTORE_GCODE_STATE NAME=load_state
 SAVE_VARIABLE VARIABLE=blob_default VALUE=1
 {% endif %}


[gcode_macro _prime1]
gcode:
 G0 Z50 F4000
 G0 X-140 Y0 F6000  # Start at the left edge (Point 1)
 G0 Z1.5 F1000
 _PRIME_BLOB_EXTRUDE_LENGTH
 G0 X-140 Y0 F8000  # Stay at the same position
 G0 Z5 F2000
 G0 X-135 Y0 F6000

[gcode_macro _prime2]
gcode:
 G0 Z50 F4000
 G0 X-98 Y-98 F6000  # 45 degrees counterclockwise from the previous point (Point 2)
 G0 Z1.5 F1000
 _PRIME_BLOB_EXTRUDE_LENGTH
 G0 X-98 Y-98 F8000  # Stay at the same position
 G0 Z5 F2000
 G0 X-93 Y-93 F6000

[gcode_macro _prime3]
gcode:
 G0 Z50 F4000
 G0 X0 Y-140 F6000  # 90 degrees counterclockwise from the previous point (Point 3)
 G0 Z1.5 F1000
 _PRIME_BLOB_EXTRUDE_LENGTH
 G0 X0 Y-140 F8000  # Stay at the same position
 G0 Z5 F2000
 G0 X0 Y-135 F6000

[gcode_macro _prime4]
gcode:
 G0 Z50 F4000
 G0 X98 Y-98 F6000  # 135 degrees counterclockwise from the previous point (Point 4)
 G0 Z1.5 F1000
 _PRIME_BLOB_EXTRUDE_LENGTH
 G0 X98 Y-98 F8000  # Stay at the same position
 G0 Z5 F2000
 G0 X93 Y-93 F6000

[gcode_macro _prime5]
gcode:
 G0 Z50 F4000
 G0 X140 Y0 F6000  # 180 degrees counterclockwise from the previous point (Point 5)
 G0 Z1.5 F1000
 _PRIME_BLOB_EXTRUDE_LENGTH
 G0 X140 Y0 F8000  # Stay at the same position
 G0 Z5 F2000
 G0 X135 Y0 F6000

[gcode_macro _prime6]
gcode:
 G0 Z50 F4000
 G0 X98 Y98 F6000  # 225 degrees counterclockwise from the previous point (Point 6)
 G0 Z1.5 F1000
 _PRIME_BLOB_EXTRUDE_LENGTH
 G0 X98 Y98 F8000  # Stay at the same position
 G0 Z5 F2000
 G0 X93 Y93 F6000

[gcode_macro _prime7]
gcode:
 G0 Z50 F4000
 G0 X0 Y140 F6000  # 270 degrees counterclockwise from the previous point (Point 7)
 G0 Z1.5 F1000
 _PRIME_BLOB_EXTRUDE_LENGTH
 G0 X0 Y140 F8000  # Stay at the same position
 G0 Z5 F2000
 G0 X0 Y135 F6000

[gcode_macro _prime8]
gcode:
 G0 Z50 F4000
 G0 X-98 Y98 F6000  # 315 degrees counterclockwise from the previous point (Point 8)
 G0 Z1.5 F1000
 _PRIME_BLOB_EXTRUDE_LENGTH
 G0 X-98 Y98 F8000  # Stay at the same position
 G0 Z5 F2000
 G0 X-93 Y93 F6000

[gcode_macro Flow_cube ]
gcode:
 {% set svv = printer.save_variables.variables %}
 {% set bed_temp1 = printer.save_variables.variables.bed_temp %}
 {% set nozzle_temp1 = printer.save_variables.variables.nozzle_temp %}
 {% if 'BED_TEMP' in params or 'NOZZLE_TEMP' in params %}
 SAVE_VARIABLE VARIABLE=bed_temp VALUE={params.BED_TEMP}
 SAVE_VARIABLE VARIABLE=nozzle_temp VALUE={params.NOZZLE_TEMP}
 M117 Both temps must be defined 
 {% endif %}
  m23 firmware_calibration_cube.gcode
  M140 S{svv.bed_temp}
  M105
  M190 S{svv.bed_temp}
  M104 S{svv.nozzle_temp}
  M105
  M109 S{svv.nozzle_temp}
  M82 ;absolute extrusion mode
  G21 ;metric values
  G90 ;absolute positioning
  M82 ;set extruder to absolute mode
  M107 ;start with the fan off
  G28 ;Home
  StealthChop  ;Stealthchop 
  G1 Z15.0 F9000 ;move the platform down 15mm
  G92 E0 ;zero the extruded length
  PRIME
  G92 E0
  performance  ;requires "pure stock" otherwise for 450w psu required for larger heater cartridges
  G92 E0
  G92 E0
  G10
  M24


[gcode_macro M106]
rename_existing: M106.0001
gcode:
    {% set m106 = printer['gcode_macro ADJUST_M106'] %}

    {% if m106.enable_override %}
        # S = The raw value that the slicer set for power
        # this is a floating point value from 0 to MAX_FLOAT.
        # It is cast to a float and divided by 255.0 to get the fan power as a float from 0.0 to MAX_FLOAT.
        # see: https://github.com/Klipper3d/klipper/blob/9f8f3cd77d97339bd825053b064ae4d08d5d6902/klippy/extras/fan.py#L68
        # if you dont specify S, 255.0 is the default value
        {% set S = params.S | default(255.0) %}

        # if S looks invalid, call the base macro implementation to generate the native error messages:
        {% if (S | float(-9999.9999) == -9999.9999) or (S | float < 0.0) %}
            # DEBUG
            # {action_respond_info("M106 input looks invalid")}
            M106.0001 S{S}
        {% else %}
            # klippy doesnt error if you submit a value larger than 255, it just caps it here https://github.com/Klipper3d/klipper/blob/9f8f3cd77d97339bd825053b064ae4d08d5d6902/klippy/extras/fan.py#L51
            # so we similarly cap it here
            {% set computed_s = (255.0, S | float) | min %}
            SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=last_s VALUE={computed_s}
            {% set fan_power = (computed_s / 2.55) %}  # fan power are a percentage

            # Only perform mapping on the value 0.0 if always is ON
            {% if fan_power != 0.0 or m106.always == "ON" %}
                # perform a mapping from [from_min, from_max] to [to_min, to_max]
                {% set map_from = [m106.from_min, m106.from_max] %}
                {% set map_to = [m106.to_min, m106.to_max] %}
                {% if fan_power < m106.from_min %}
                    # perform a mapping from [0, from_min] to [([0.0, to_min] | min), to_min]
                    {% set map_from = [0.0, m106.from_min] %}
                    {% set map_to = [([0.0, m106.to_min] | min), m106.to_min] %}
                {% elif fan_power > m106.from_max %}
                    # perform a mapping from [from_max, 100.0] to [to_max, ([100.0, to_min] | max)]
                    {% set map_from = [m106.from_max, 100.0] %}
                    {% set map_to = [m106.to_max, ([100.0, m106.to_min] | max)] %}
                {% endif %}
                # mapping math
                {% set fan_power = map_to[0] + ((map_to[1] - map_to[0]) / (map_from[1] - map_from[0])) * (fan_power - map_from[0]) %}
                # clamp to [0.0 100.0]
                {% set fan_power = [0.0, ([100.0, fan_power] | min)] | max %}
            {% endif %}

            # apply min/max limits
            {% set fan_power = [m106.max_power, ([m106.min_power, fan_power] | max)] | min %}

            # fan always on/off
            # get the off_below value of the fan.
            {% set fan_off_below = (printer["configfile"]["config"][m106.print_fan].off_below | float) * 100.0 %}
            # fan always on means the fan must always run
            {% if m106.always == "ON" and fan_power < fan_off_below %}
                # fan power must be at least the fan_off_below value
                {% set fan_power = fan_off_below %}
            # fan always off means the fan never runs
            {% elif m106.always == "OFF" %}
                {% set fan_power = 0.0 %}
            {% endif %}

            # DEBUG
            # {action_respond_info("Slicer fan power overridden %.1f -> %.1f" % (computed_s, fan_power * 2.55))}
            M106.0001 S{fan_power * 2.55}
        {% endif %}
    {% else %}
        M106.0001 {% for p in params%}{'%s%s ' % (p, params[p])}{% endfor %}

        # save the value after calling base implementation, so if the above line throws an error this one never runs
        {% if params.S is defined %}
            SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=last_s VALUE={params.S | float}
        {% endif %}
    {% endif %}

[gcode_macro ADJUST_M106]
variable_print_fan: "fan"
variable_last_s: 0.0
variable_min_power: 0.0
variable_max_power: 100.0
variable_always: "SLICER"   # 'SLICER' | 'ON' | 'OFF'
variable_from_min: 0.0
variable_from_max: 100.0
variable_to_min: 0.0
variable_to_max: 100.0
variable_enable_override: False
description: Modifies the behaiour of the M106 command to adjust or oeverride fan power settings from your slicer
gcode:
    {% set ENABLED = params.ENABLED | default(none) %}
    # if you call to apply a settings change it is assumed you want that setting applied immediatly
    # so ENABLED=true is assumed if the ENABLED parameter is omitted
    {% set ENABLED = (ENABLED is none) or ((ENABLED | string | lower) in ('1', 'true', 'on')) %}

    # set the fan
    {% set FAN = params.FAN | default('fan') %}
    {% if not FAN is none %}
        {% set FAN = FAN | string %}
        {% if not FAN in printer or not FAN in printer["configfile"]["config"] %}
            {action_raise_error("No fan named '%s' found in the printer's config" % (FAN))}
        {% endif %}
    {% endif %}

    # max power must be more than min power
    {% set MAX = params.MAX | default(none) %}
    {% if not MAX is none %}
        {% set MAX = [100.0, [0.0, (MAX | float)] | max] | min %}
    {% endif %}

    {% set MIN = params.MIN | default(none) %}
    {% if not MIN is none %}
        {% set MIN = [100.0, [0.0, (MIN | float)] | max] | min %}
    {% endif %}

    {% if (not MAX is none) and (not MIN is none) and MAX < MIN %}
        {action_raise_error("MAX power must be greater than MIN power")}
    {% endif %}

    # ALWAYS=ON, ALWAYS=OFF, ALWAYS=SLICER
    {% set ALWAYS = params.ALWAYS | default(none) %}
    {% if not ALWAYS is none %}
        {% set ALWAYS = ALWAYS | string | upper %}
        {% if ALWAYS not in ("ON", "OFF", "SLICER") %}
            {action_raise_error("ALWAYS can be one of: 'SLICER', 'ON' or 'OFF'")}
        {% endif %}
    {% endif %}

    # Format is: either a number or adjust_value|threashold, e.g. ADJUST_HIGH=10|50 would increase fan values by 10 at/above 50
    {% set ADJUST = params.ADJUST | default(none) %}
    {% if not ADJUST is none %}
        {% set from_min = 0.0 %}
        {% set from_max = 100.0 %}
        {% set to_min = 0.0 %}
        {% set to_max = 100.0 %}
        {% if ADJUST | float(-99999.9999) != -99999.9999 %}
            {% set to_min = 0.0 + (ADJUST | float) %}
            {% set to_max = 100.0 + (ADJUST | float) %}
        {% else %}
            {% set split_adjust = (ADJUST | string).split("|") %}
            {% if (split_adjust | length) != 2 %}
                {action_raise_error("ADJUST format error, missing '|', expected 'n->n|n->n'")}
            {% endif %}
            {% if split_adjust[0] | length > 0 %}
                {% set split_low = (split_adjust[0]).split("->") %}
                {% if (split_low | length) != 2 %}
                    {action_raise_error("ADJUST value error, didnt find 2 values in the minimum mapping")}
                {% endif %}
                {% set from_min = split_low[0] | float %}
                {% if from_min > 100.0 or to_min < 0.0 %}
                    {action_raise_error("ADJUST value error, minimum from value not in range [0.0, 100.0]")}
                {% endif %}
                {% set to_min = split_low[1] | float %}
                {% if to_min > 200.0 or to_min < -100.0 %}
                    {action_raise_error("ADJUST value error, minimum to value not in range [-100.0, 200.0]")}
                {% endif %}
            {% endif %}

            {% if split_adjust[1] | length > 0 %}
                {% set split_high = (split_adjust[1]).split("->") %}
                {% if (split_high | length) != 2 %}
                    {action_raise_error("ADJUST value error, didnt find 2 values in the maximum mapping")}
                {% endif  %}
                {% set from_max = split_high[0] | float %}
                {% if from_max > 100.0 or from_max < 0.0 %}
                    {action_raise_error("ADJUST value error, maximum from value not in range [0.0, 100.0]")}
                {% endif %}
                {% set to_max = split_high[1] | float %}
                {% if to_max > 200.0 or to_max < -100.0%}
                    {action_raise_error("ADJUST value error, maximum to value not in range [-100.0, 200.0]")}
                {% endif %}
            {% endif %}
        {% endif %}
        # the 2 from extents cant cross
        {% if from_min > from_max %}
            {action_raise_error("ADJUST value error, minimum from value must be less than or equal to the maximum from value")}
        {% endif %}
        {% if to_min > to_max %}
            {action_raise_error("ADJUST value error, minimum to value must be less than or equal to the maximum to value")}
        {% endif %}
    {% endif %}

    {% set m106 = printer['gcode_macro ADJUST_M106'] %}

    # all parameter unpacking and checking has been completed, save anything that was set
    SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=enable_override VALUE={ENABLED}
    {% if not FAN is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=print_fan VALUE="'{FAN}'"
    {% endif%}
    {% if not MAX is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=max_power VALUE={MAX}
    {% endif %}
    {% if not MIN is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=min_power VALUE={MIN}
    {% endif %}
    {% if not ALWAYS is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=always VALUE="'{ALWAYS}'"
    {% endif %}
    {% if not ADJUST is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=from_min VALUE={from_min}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=from_max VALUE={from_max}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=to_min   VALUE={to_min}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=to_max   VALUE={to_max}
    {% endif %}

    # apply settngs to fan now
    M106 S{m106.last_s}

    # show results of changes:
    SHOW_M106

[gcode_macro SHOW_M106]
description: Show all settings in M106
gcode:
    {% set m106 = printer['gcode_macro ADJUST_M106'] %}
    {action_respond_info("Part Cooling Override Info. Enabled?: %s, Fan: %s (off below %.1f%%)" % (m106.enable_override, m106.print_fan, (printer["configfile"]["config"][m106.print_fan].off_below | float) * 100))}
    {action_respond_info("Min Power: %.1f%%, Max Power: %.1f%%, Always On: %s" % (m106.min_power, m106.max_power, m106.always))}
    {% if m106.from_min == 0.0 and m106.from_max == 100.0 and  m106.to_min == (m106.to_max - 100.0) %}
        {action_respond_info("Power Adjustment: %.1f%%" % (m106.to_min))}
    {% else %}
        {action_respond_info("Power Mapping: %.1f%% -> %.1f%% : %.1f%% -> %.1f%%" % (m106.from_min, m106.to_min, m106.from_max, m106.to_max))}
    {% endif %}
    {action_respond_info("Slicer power setting: %.1f%% (%.1f), Actual fan power: %.1f%% (%.1f)" % (m106.last_s / 2.55, m106.last_s, (printer[m106.print_fan].speed) * 100.0, (printer[m106.print_fan].speed) * 255.0))}

[gcode_macro RESET_M106]
description: Reset all settings to defaults found in ADJUST_M106
gcode:
    ADJUST_M106 MIN=0 MAX=100 ADJUST=0 ALWAYS=SLICER ENABLED=FALSE

[gcode_macro M107]
rename_existing: M107.0001
description: Overrides the M107 command to stop the slicer from shutting off the fan if so configured
gcode:
    # calling M107 implies the slicer wants 0 fan speed
    SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=last_s VALUE=0.0
    {% set m106 = printer['gcode_macro ADJUST_M106'] %}
    {% if m106.enable_override is false or m106.always != "ON" %}
        M107.0001
    {% endif %}

    # credits Ellis 

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set slow_purge_speed = (4*60) %}  #values converted to mms 
    {% set default_load_speed = (20*60) %}
    {% set slowload = (40) %}
    {% set fastload = (550) %}
    {% set svv = printer.save_variables.variables %}
    {% if svv.slight_purge_amount and svv.extruder_load and svv.slight_purge_speed and svv.filament_load_speed %}
    SAVE_GCODE_STATE NAME=load_state
    M117 loading filament...
    G91
    G92 E0
    G1 E{svv.extruder_load} F{svv.filament_load_speed} # fast-load
    G1 E{svv.slight_purge_amount} F{svv.slight_purge_speed} # purge
    M400 
    M117 loading filament complete 
    RESTORE_GCODE_STATE NAME=load_state
    {% else %}
    SAVE_GCODE_STATE NAME=load_state
    M117 loading filament...
    G91
    G92 E0
    G1 E{fastload} F{default_load_speed} # fast-load
    G1 E{slowload} F{slow_purge_speed} # purge
    M400 
    M117 loading filament complete 
    RESTORE_GCODE_STATE NAME=load_state
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set slow_purge_speed = (4*60) %}  #values converted to mms 
    {% set default_unload_speed = (20*60) %}
    {% set amount = (2) %} 
    {% set unload = (590) %}
    {% set svv = printer.save_variables.variables %}
    {% if svv.slight_purge_amount and svv.extruder_unload and svv.slight_purge_speed and svv.filament_unload_speed %}
      SAVE_GCODE_STATE NAME=unload_state
      M117 Unloading filament...
      G91
      G92 E0
      G1 E{svv.slight_purge_amount} F{slight_purge_speed} # purge
      G1 E{svv.extruder_unload} F{svv.filament_unload_speed} # fast-unload
      M400
      M117 filament unload complete
      RESTORE_GCODE_STATE NAME=unload_state
    {% else %}
      SAVE_GCODE_STATE NAME=unload_state
      M117 Unloading filament...
      G91
      G92 E0
      G1 E{amount} F{slow_purge_speed} # purge
      G1 E-{unload} F{default_unload_speed} # fast-unload
      M400
      M117 filament unload complete
      RESTORE_GCODE_STATE NAME=unload_state
    {% endif %}